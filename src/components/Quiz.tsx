import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Progress } from "@/components/ui/progress";
import { ArrowRight, ArrowLeft, Trophy, Target } from "lucide-react";

const questions = [
  {
    id: 1,
    title: "–ö–∞–∫–æ–π —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤–∞–º –Ω—É–∂–µ–Ω?",
    options: [
      { value: "sedan", label: "üöó –°–µ–¥–∞–Ω", icon: "üöó" },
      { value: "suv", label: "üöô –í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫", icon: "üöô" },
      { value: "sport", label: "üèéÔ∏è –°–ø–æ—Ä—Ç–∫–∞—Ä", icon: "üèéÔ∏è" },
      { value: "electric", label: "‚ö° –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å", icon: "‚ö°" },
      { value: "classic", label: "üöò –ö–ª–∞—Å—Å–∏–∫–∞/–†–µ—Ç—Ä–æ", icon: "üöò" }
    ]
  },
  {
    id: 2,
    title: "–í–∞—à –±—é–¥–∂–µ—Ç?",
    options: [
      { value: "30k", label: "–î–æ $30,000", icon: "üí∞" },
      { value: "50k", label: "$30,000 - $50,000", icon: "üí∞üí∞" },
      { value: "100k", label: "$50,000 - $100,000", icon: "üí∞üí∞üí∞" },
      { value: "100k+", label: "–ë–æ–ª–µ–µ $100,000", icon: "üíé" }
    ]
  },
  {
    id: 3,
    title: "–ò–∑ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω—ã –ø—Ä–∏–≤–µ–∑—Ç–∏?",
    options: [
      { value: "usa", label: "üá∫üá∏ –°–®–ê", icon: "üá∫üá∏" },
      { value: "europe", label: "üá™üá∫ –ï–≤—Ä–æ–ø–∞", icon: "üá™üá∫" },
      { value: "japan", label: "üáØüáµ –Ø–ø–æ–Ω–∏—è", icon: "üáØüáµ" },
      { value: "korea", label: "üá∞üá∑ –ö–æ—Ä–µ—è", icon: "üá∞üá∑" },
      { value: "china", label: "üá®üá≥ –ö–∏—Ç–∞–π", icon: "üá®üá≥" },
      { value: "uae", label: "üá¶üá™ –û–ê–≠", icon: "üá¶üá™" }
    ]
  },
  {
    id: 4,
    title: "–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?",
    options: [
      { value: "now", label: "–í —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞", icon: "üî•" },
      { value: "3month", label: "1-3 –º–µ—Å—è—Ü–∞", icon: "üìÖ" },
      { value: "6month", label: "3-6 –º–µ—Å—è—Ü–µ–≤", icon: "üìÜ" },
      { value: "later", label: "–ü—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å", icon: "ü§î" }
    ]
  },
  {
    id: 5,
    title: "–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?",
    options: [
      { value: "price", label: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", icon: "üíµ" },
      { value: "speed", label: "–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", icon: "üöÄ" },
      { value: "condition", label: "–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", icon: "‚ú®" },
      { value: "rare", label: "–†–µ–¥–∫–∞—è –º–æ–¥–µ–ª—å", icon: "üíé" },
      { value: "performance", label: "–î–∏–Ω–∞–º–∏–∫–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å", icon: "‚ö°" }
    ]
  }
];

const Quiz = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<{[key: number]: string}>({});
  const [showResult, setShowResult] = useState(false);
  const [contactForm, setContactForm] = useState({ name: "", phone: "" });

  const progress = ((currentQuestion + 1) / questions.length) * 100;

  const handleAnswer = (value: string) => {
    setAnswers({ ...answers, [currentQuestion]: value });
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowResult(true);
    }
  };

  const handleBack = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const handleSubmit = () => {
    console.log("Quiz completed:", { answers, contact: contactForm });
    // Handle form submission
  };

  if (showResult) {
    return (
      <section className="py-20">
        <div className="container mx-auto px-4">
          <Card className="max-w-2xl mx-auto p-8 glass">
            <div className="text-center mb-8">
              <Trophy className="w-16 h-16 text-primary mx-auto mb-4" />
              <h2 className="text-3xl font-bold mb-2">üéä –ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø –ü–û–î–ë–û–†–ö–ê –ì–û–¢–û–í–ê!</h2>
              <p className="text-muted-foreground">–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –º—ã –Ω–∞—à–ª–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã</p>
            </div>

            <div className="grid md:grid-cols-3 gap-4 mb-8">
              <div className="text-center p-4 bg-primary/10 rounded-lg">
                <p className="text-3xl font-bold text-primary">12</p>
                <p className="text-sm text-muted-foreground">–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≤—Ç–æ</p>
              </div>
              <div className="text-center p-4 bg-primary/10 rounded-lg">
                <p className="text-3xl font-bold text-primary">‚ÇΩ2.1M</p>
                <p className="text-sm text-muted-foreground">–ú–∞–∫—Å. —ç–∫–æ–Ω–æ–º–∏—è</p>
              </div>
              <div className="text-center p-4 bg-primary/10 rounded-lg">
                <p className="text-3xl font-bold text-primary">45-60</p>
                <p className="text-sm text-muted-foreground">–î–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∞</p>
              </div>
            </div>

            <div className="bg-secondary/10 rounded-lg p-4 mb-6">
              <p className="text-center font-semibold text-secondary">
                üéÅ –ë–æ–Ω—É—Å: –°–∫–∏–¥–∫–∞ 5% –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–∏–∑–∞ + –£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –ø–æ–¥–±–æ—Ä–∞!
              </p>
            </div>

            <div className="space-y-4">
              <p className="text-center text-muted-foreground">
                –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–±–æ—Ä–∫–∏
              </p>
              <Input 
                placeholder="–í–∞—à–µ –∏–º—è" 
                value={contactForm.name}
                onChange={(e) => setContactForm({...contactForm, name: e.target.value})}
              />
              <Input 
                placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" 
                type="tel"
                value={contactForm.phone}
                onChange={(e) => setContactForm({...contactForm, phone: e.target.value})}
              />
              <Button variant="cta" size="lg" className="w-full" onClick={handleSubmit}>
                –ü–û–õ–£–ß–ò–¢–¨ –ü–û–î–ë–û–†–ö–£ –ò –°–ö–ò–î–ö–£
              </Button>
            </div>
          </Card>
        </div>
      </section>
    );
  }

  const question = questions[currentQuestion];

  return (
    <section className="py-20 bg-gradient-dark">
      <div className="container mx-auto px-4">
        <div className="text-center mb-8">
          <h2 className="text-3xl md:text-5xl font-bold mb-4">
            <Target className="inline-block w-12 h-12 text-primary mr-4" />
            <span className="gradient-text">–ù–ê–ô–î–ï–ú –ò–î–ï–ê–õ–¨–ù–´–ô –ê–í–¢–û–ú–û–ë–ò–õ–¨</span>
            <span className="text-foreground"> –ó–ê 2 –ú–ò–ù–£–¢–´</span>
          </h2>
        </div>

        <Card className="max-w-3xl mx-auto p-8 glass">
          {/* Progress */}
          <div className="mb-6">
            <div className="flex justify-between text-sm mb-2">
              <span className="text-muted-foreground">–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
              <span className="text-primary font-semibold">{currentQuestion + 1}/{questions.length}</span>
            </div>
            <Progress value={progress} className="h-2" />
          </div>

          {/* Question */}
          <h3 className="text-2xl font-bold mb-8 text-center">{question.title}</h3>

          {/* Options */}
          <div className="grid md:grid-cols-2 gap-4 mb-8">
            {question.options.map((option) => (
              <Button
                key={option.value}
                variant="outline"
                size="lg"
                className="h-auto p-6 justify-start hover:border-primary hover:shadow-glow"
                onClick={() => handleAnswer(option.value)}
              >
                <span className="text-2xl mr-3">{option.icon}</span>
                <span className="text-base">{option.label}</span>
              </Button>
            ))}
          </div>

          {/* Navigation */}
          <div className="flex justify-between">
            <Button
              variant="ghost"
              onClick={handleBack}
              disabled={currentQuestion === 0}
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
            <Button variant="ghost">
              –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
              <ArrowRight className="w-4 h-4 ml-2" />
            </Button>
          </div>
        </Card>
      </div>
    </section>
  );
};

export default Quiz;